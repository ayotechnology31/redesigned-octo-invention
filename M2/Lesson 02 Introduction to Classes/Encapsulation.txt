Milestone 2
Lesson 02: Introduction to Classes
Encapsulation

The process of binding data members and function members 
into one unit, the class. And controlling how other code accesses 
the members of the class is known as encapsulation.

Encapsulation Benefits
1. Data hiding - to ensure values can't be improperly changed
2. Workflow methods
3. Ease of change 

Add field age, of type int from DefiningClassesInstatiatingObjects
class Person
{
	 public string name;
	 private int age;
	 
	 public void IntroduceMyself()
	 {
		Console.WriteLine($"HI, I'm {name}");
	 }
}

Person joe = new Person();
joe.age = 27;

Make access modifer to make age private.
But now age is inaccessible outside person class
Need to create 2 mthods to Person class.
One to get value of age and one to set value of age
get is accessor/getter
set is mutator/setter

class Person
{
	 public string name;
	 private int age;
	 
	 public int getAge()
	 {
		return age;
	 }
	 
	 public void setAge(int age)
	 { 
		this.age = age;
	 }
	 public void IntroduceMyself()
	 {
		Console.WriteLine($"HI, I'm {name}");
	 }
}

Now change the setter method to check to see if number is below zero
class Person
{
	 public string name;
	 private int age;
	 
	 public int getAge()
	 {
		return age;
	 }
	 
	 public void setAge(int age)
	 { 
		if (age >= 0)
		{
			this.age = age;
		}
	 }
	 public void IntroduceMyself()
	 {
		Console.WriteLine($"HI, I'm {name}");
	 }
}
Now change the value for age
Person joe = new Person();
joe.setAge(27);


Property Syntax
Preferred way to expose class data
Results in few lines of code
Results in code that reads more naturally

Now change fields to properties
class Person
{
	 public string name;
	 private int age;
	 
	 public int getAge()
	 {
		return age;
	 }
	 
	 public void setAge(int age)
	 { 
		if (age >= 0)
		{
			this.age = age;
		}
	 }
	 public void IntroduceMyself()
	 {
		Console.WriteLine($"HI, I'm {name}");
	 }
}
Person joe = new Person();
joe.setAge(27);


Backing field: Private field in a class used to store the 
value for one or more public properties

class Person
{
	 public string name;
	 private int age;
	 
	 public int Age()
	 {
		get { return age; }
		set
		{
			if (value <= 0)
			{
				age = value;
			}
		}
	 }
	 
	
	 public void IntroduceMyself()
	 {
		Console.WriteLine($"HI, I'm {name}");
	 }
}
Person joe = new Person();
joe.setAge(27);

Incoming data is always called value  

Now see "name" field. We want all fields to be encapsulated
C# has Auto properties. C# has the concept of what are known as 
auto properties. Which are used in cases just like this where 
we want to encapsulate our field.
But we don't want to have any special logic to invoke. 

getter setter way:
public string getName()
{
	return name;
}

public void serName(string name)
{
	this.name = name;
}

Auto Property way
public string Name { get; set; }

Setting propery of Name is more intuitive as well
joe.setName("Joe");

Auto-Property: joe.Name = "Joe";

Fields vs Prperties
-Used across multiple methods, does not need to be exposed outside class: private field
-Used outside class: property
-Any code can read from/write to, no special logic: auto-properties 
